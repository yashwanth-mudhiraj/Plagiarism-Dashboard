/**
 * Defines a selection in a file.
 */
export declare class Region {
    startRow: number;
    startCol: number;
    endRow: number;
    endCol: number;
    static compare(left: Region, right: Region): number;
    static valid(startRow: number, startCol: number, endRow: number, endCol: number): boolean;
    static isInOrder(first: Region, second: Region): boolean;
    static merge(one: Region, other: Region): Region;
    constructor(startRow: number, startCol: number, endRow: number, endCol: number);
    overlapsWith(other: Region): boolean;
    toString(): string;
    /**
     * This function takes the 'difference' of one region with a list of other regions.
     * The 'difference' of a region is every interval [(x1,y1), (x2, y2)] that is only covered by the source region.
     *
     * In this case, this is useful for determining the region a node covers without taking its children into account.
     *
     * Every region that belongs to the diff (that is covered by source, and not by any other) is called a 'good' region.
     * @param source
     * @param other
     */
    static diff(source: Region, ...other: Region[]): Region[];
}
//# sourceMappingURL=region.d.ts.map