declare type ResultValue<T> = T | Error;
/**
 * A class that represents the result of a computation that could have failed.
 * Its value is either a T or an Error.
 *
 */
export declare class Result<T> {
    static try<T>(canFail: () => T): Result<T>;
    static settled<T>(result: Result<Promise<T>>): Promise<Result<T>>;
    static all<T>(promises: Array<Promise<Result<T>>>): Promise<Result<Array<T>>>;
    static tryAwait<T>(canFail: () => Promise<T>): Promise<Result<T>>;
    static ok<T>(value: T): Result<T>;
    static error<T>(error: Error): Result<T>;
    readonly value: ResultValue<T>;
    private constructor();
    isError(): boolean;
    map<R>(f: (t: T) => R): Result<R>;
    andThen<R>(f: (t: T) => Result<R>): Result<R>;
    ok(): T;
    okOr(alt: T): T;
    okOrElse(alt: () => T): T;
    isOk(): boolean;
    error(): Error;
    toString(): string;
}
export {};
//# sourceMappingURL=result.d.ts.map