"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Range = void 0;
const assert_1 = __importDefault(require("assert"));
/**
 * A range of whole numbers starting at `from` (inclusive) and ending at `to`
 * (Exclusive).
 */
class Range {
    constructor(from, to = -1) {
        this.from = from;
        this.to = to;
        if (this.to == -1) {
            this.to = this.from + 1;
        }
        (0, assert_1.default)(this.from < this.to, "'from' should be smaller than 'to'");
    }
    static compare(one, other) {
        if (one.from == other.from) {
            return one.to - other.to;
        }
        else {
            return one.from - other.from;
        }
    }
    static merge(one, other) {
        return new Range(Math.min(one.from, other.from), Math.max(one.to, other.to));
    }
    static totalCovered(ranges) {
        let total = 0;
        let last = 0;
        for (const range of ranges.sort(Range.compare)) {
            if (last < range.to) {
                total += range.to - Math.max(last, range.from);
                last = range.to;
            }
        }
        return total;
    }
    get length() {
        return this.to - this.from;
    }
    overlapsWith(other) {
        if (this.from < other.from) {
            return this.to > other.from;
        }
        else if (this.from > other.from) {
            return other.to > this.from;
        }
        else { // 'from' overlaps
            return true;
        }
    }
    contains(other) {
        return this.from <= other.from && other.to <= this.to;
    }
}
exports.Range = Range;
//# sourceMappingURL=range.js.map