"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Options = void 0;
function validatePercentage(prop, value) {
    if (value && (value < 0 || 1 < value)) {
        return `${prop} must be a fraction between 0 and 1, but was ${value}`;
    }
    return null;
}
function validatePositiveInteger(prop, value) {
    if (value && (Number.isInteger(value) && value < 0)) {
        return `${prop} must be a positive integer, but was ${value}`;
    }
    return null;
}
function definedOrNull(arg) {
    return arg == null ? null : arg;
}
function definedOrDefault(arg, def) {
    return arg == null ? def : arg;
}
class Options {
    constructor(custom) {
        this.custom = {};
        if (custom !== undefined) {
            this.custom = custom;
        }
        const errors = [
            validatePercentage("minSimilarity", this.minSimilarity),
            validatePercentage("maxFingerprintPercentage", this.maxFingerprintPercentage),
            validatePositiveInteger("minFragmentLength", this.minFragmentLength),
            validatePositiveInteger("maxFingerprintCount", this.maxFingerprintCount),
            validatePositiveInteger("limitResults", this.limitResults),
            validatePositiveInteger("kgramLength", this.kgramLength),
            validatePositiveInteger("kgramsInWindow", this.kgramsInWindow),
        ].filter(err => err !== null);
        if (errors.length > 0) {
            throw new Error(`The following options are invalid:\n${errors.join("\n")}`);
        }
        Object.freeze(this);
    }
    get kgramData() {
        return this.custom.kgramData == true;
    }
    get limitResults() {
        return definedOrNull(this.custom.limitResults);
    }
    get language() {
        return definedOrDefault(this.custom.language, Options.defaultLanguage);
    }
    get kgramLength() {
        return definedOrDefault(this.custom.kgramLength, Options.defaultKgramLength);
    }
    get kgramsInWindow() {
        return definedOrDefault(this.custom.kgramsInWindow, Options.defaultKgramsInWindow);
    }
    get filterByPercentage() {
        return this.custom.maxFingerprintCount === undefined;
    }
    get maxFingerprintCount() {
        return definedOrNull(this.custom.maxFingerprintCount);
    }
    get maxFingerprintPercentage() {
        return definedOrNull(this.custom.maxFingerprintPercentage);
    }
    get minFragmentLength() {
        return definedOrDefault(this.custom.minFragmentLength, Options.defaultMinFragmentLength);
    }
    get minSimilarity() {
        return definedOrDefault(this.custom.minSimilarity, Options.defaultMinSimilarity);
    }
    get sortBy() {
        return definedOrDefault(this.custom.sortBy, Options.defaultSortBy);
    }
    get fragmentSortBy() {
        return definedOrDefault(this.custom.fragmentSortBy, Options.defaultFragmentSortBy);
    }
    get semantic() {
        return definedOrDefault(this.custom.semantic, Options.defaultSemantic);
    }
    get semanticMatchLength() {
        return definedOrDefault(this.custom.semanticMatchLength, Options.defaultSemanticLength);
    }
    asObject() {
        return {
            kgramLength: this.kgramLength,
            kgramsInWindow: this.kgramsInWindow,
            language: this.language,
            maxFingerprintCount: this.custom.maxFingerprintCount || null,
            maxFingerprintPercentage: this.maxFingerprintPercentage,
            minFragmentLength: this.minFragmentLength,
            limitResults: this.limitResults,
            minSimilarity: this.minSimilarity,
            sortBy: this.sortBy,
            fragmentSortBy: this.fragmentSortBy,
            kgramData: this.kgramData,
            semantic: this.semantic,
            semanticMatchLength: this.semanticMatchLength,
        };
    }
    toString() {
        return JSON.stringify(this.asObject());
    }
}
exports.Options = Options;
Options.defaultKgramLength = 23;
Options.defaultKgramsInWindow = 17;
Options.defaultLanguage = "javascript";
Options.defaultMinFragmentLength = 0;
Options.defaultMinSimilarity = 0;
Options.defaultSortBy = "total";
Options.defaultFragmentSortBy = "none";
Options.defaultSemantic = false;
Options.defaultSemanticLength = 30;
//# sourceMappingURL=options.js.map