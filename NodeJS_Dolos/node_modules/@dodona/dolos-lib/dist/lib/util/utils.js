"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeMap = exports.deserializeMapC = exports.serializeMapC = exports.serializeMap = exports.mapValues = exports.intersect = exports.combineByKey = exports.sumByKey = exports.countByKey = exports.closestMatch = void 0;
function closestMatch(input, options) {
    for (const key of Object.keys(options)) {
        if (key.startsWith(input)) {
            return options[key];
        }
    }
    return null;
}
exports.closestMatch = closestMatch;
function countByKey(list) {
    const dict = new Map();
    for (const val of list) {
        dict.set(val, (dict.get(val) || 0) + 1);
    }
    return dict;
}
exports.countByKey = countByKey;
function sumByKey(dict1, dict2) {
    const copy = new Map(dict2);
    for (const [key, count] of dict1) {
        copy.set(key, (copy.get(key) || 0) + count);
    }
    return copy;
}
exports.sumByKey = sumByKey;
function combineByKey(dict1, dict2) {
    const copy = new Map([...dict2.entries()].map(([key, values]) => [key, [...values]]));
    for (const [key, values] of dict1) {
        copy.set(key, [...(copy.get(key) || []), ...values]);
    }
    return copy;
}
exports.combineByKey = combineByKey;
function intersect(set1, set2) {
    const copy = new Set(set1);
    for (const el of set1) {
        if (!set2.has(el)) {
            copy.delete(el);
        }
    }
    return copy;
}
exports.intersect = intersect;
function mapValues(mapper, map) {
    return new Map([...map.entries()].map(([key, val]) => [key, mapper(val)]));
}
exports.mapValues = mapValues;
function serializeMap(map) {
    return serializeMapC(map, v => v);
}
exports.serializeMap = serializeMap;
function serializeMapC(map, internalMapper) {
    const workingMap = mapValues(internalMapper, map);
    return [...workingMap.entries()];
}
exports.serializeMapC = serializeMapC;
function deserializeMapC(map, internalMapper) {
    const workingArray = map.map(([key, value]) => [key, internalMapper(value)]);
    return new Map(workingArray);
}
exports.deserializeMapC = deserializeMapC;
function deserializeMap(map) {
    return deserializeMapC(map, v => v);
}
exports.deserializeMap = deserializeMap;
//# sourceMappingURL=utils.js.map