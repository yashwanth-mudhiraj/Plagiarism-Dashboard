export declare function closestMatch<V>(input: string, options: {
    [key: string]: V;
}): V | null;
export declare function countByKey<V>(list: Array<V>): Map<V, number>;
export declare function sumByKey<V>(dict1: Map<V, number>, dict2: Map<V, number>): Map<V, number>;
export declare function combineByKey<K, V>(dict1: Map<K, V[]>, dict2: Map<K, V[]>): Map<K, V[]>;
export declare function intersect<T>(set1: Set<T>, set2: Set<T>): Set<T>;
export declare function mapValues<K, V1, V2>(mapper: (a: V1) => V2, map: Map<K, V1>): Map<K, V2>;
export declare function serializeMap<K, V>(map: Map<K, V>): Array<[K, V]>;
export declare function serializeMapC<K, V, R>(map: Map<K, V>, internalMapper: (a: V) => R): Array<[K, R]>;
export declare function deserializeMapC<K, V, R>(map: Array<[K, V]>, internalMapper: (a: V) => R): Map<K, R>;
export declare function deserializeMap<K, V>(map: Array<[K, V]>): Map<K, V>;
//# sourceMappingURL=utils.d.ts.map