"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.File = void 0;
const result_1 = require("../util/result");
const fs_1 = __importDefault(require("fs"));
const identifiable_1 = __importDefault(require("../util/identifiable"));
const fs = fs_1.default.promises;
/**
 * Contains the content of a file, does not need to be backed by an actual file
 * (so it can be used to stub files in the tests).
 */
class File extends identifiable_1.default {
    constructor(path, content, extra, id) {
        super(id);
        this.path = path;
        this.charCount = content.length;
        this.lines = content.split("\n");
        this.lineCount = this.lines.length;
        this.extra = extra;
    }
    static compare(a, b) {
        if (a.path < b.path) {
            return -1;
        }
        else if (a.path > b.path) {
            return 1;
        }
        else {
            return 0;
        }
    }
    /**
     * Reads all the given locations into files.
     *
     * Returns a result which is either an array of all the files, or an error
     * combining all the errors encountered when reading the location list.
     */
    static async readAll(locations) {
        return result_1.Result.all(locations.map(location => File.fromPath(location)));
    }
    /**
     * Read the given location into a file.
     *
     * Returns a result with the File if it succeeded, or an Error otherwise.
     */
    static async fromPath(location, extra) {
        return result_1.Result.tryAwait(async () => new File(location, (await fs.readFile(location)).toString(), extra));
    }
    get content() {
        return this.lines.join("\n");
    }
}
exports.File = File;
//# sourceMappingURL=file.js.map