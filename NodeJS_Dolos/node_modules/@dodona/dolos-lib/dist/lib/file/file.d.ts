import { Result } from "../util/result";
import Identifiable from "../util/identifiable";
export interface ExtraInfo {
    filename: string;
    fullName: string;
    id: string;
    status: string;
    submissionID: string;
    nameEN: string;
    nameNL: string;
    exerciseID: string;
    createdAt: Date;
    labels: string;
}
/**
 * Contains the content of a file, does not need to be backed by an actual file
 * (so it can be used to stub files in the tests).
 */
export declare class File extends Identifiable {
    readonly path: string;
    readonly charCount: number;
    readonly lineCount: number;
    readonly lines: Array<string>;
    readonly extra?: ExtraInfo;
    static compare(a: File, b: File): number;
    /**
     * Reads all the given locations into files.
     *
     * Returns a result which is either an array of all the files, or an error
     * combining all the errors encountered when reading the location list.
     */
    static readAll(locations: Array<string>): Promise<Result<Array<File>>>;
    /**
     * Read the given location into a file.
     *
     * Returns a result with the File if it succeeded, or an Error otherwise.
     */
    static fromPath(location: string, extra?: ExtraInfo): Promise<Result<File>>;
    constructor(path: string, content: string, extra?: ExtraInfo, id?: number);
    get content(): string;
}
//# sourceMappingURL=file.d.ts.map