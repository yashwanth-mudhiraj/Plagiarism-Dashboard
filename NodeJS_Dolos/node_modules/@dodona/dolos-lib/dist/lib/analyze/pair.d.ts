import { PairedOccurrence } from "./pairedOccurrence";
import { Fragment } from "./fragment";
import { TokenizedFile } from "../file/tokenizedFile";
import Identifiable from "../util/identifiable";
/**
 * This class represents all the fragments between two files (i.e. the
 * pair of their hashes).
 */
export declare class Pair extends Identifiable {
    readonly leftFile: TokenizedFile;
    readonly rightFile: TokenizedFile;
    private fragmentStart;
    private fragmentEnd;
    constructor(leftFile: TokenizedFile, rightFile: TokenizedFile);
    get fragmentCount(): number;
    /**
     * Creates an array of fragments in this pair, sorted by their
     * leftkgrams range.
     */
    fragments(): Array<Fragment>;
    /**
     * Add a new paired occurrence to the pair.
     *
     * Tries to extend existing fragments, or creates a new fragment.
     */
    addPair(newPair: PairedOccurrence): void;
    /**
     * Calculate how much kgrams both files share. Each kgram is only counted once.
     */
    totalOverlapkgrams(): number;
    /**
     * Returns the length (in kgrams) of the largest fragment in this pair.
     */
    longestFragment(): number;
    /**
     * Remove fragments which have fewer than the given minimum of pairedOccurrences.
     */
    removeSmallerThan(minimum: number): void;
    /**
     * Remove each Fragment that is contained in a bigger Fragment.
     */
    squash(): void;
    private removefragment;
    private key;
}
//# sourceMappingURL=pair.d.ts.map