import { HashFilter } from "../hashing/hashFilter";
import { Options } from "../util/options";
import { Tokenizer } from "../tokenizer/tokenizer";
import { File } from "../file/file";
import { Report, Occurrence } from "./report";
import { TokenizedFile } from "../file/tokenizedFile";
declare type Hash = number;
export declare class Index {
    private readonly options;
    private readonly kgramLength;
    private readonly kgramsInWindow;
    private readonly tokenizer;
    protected readonly hashFilter: HashFilter;
    /**
     * Creates a Index object with a given Tokenizer , an optional Options
     * object, and an optional HashFilter.
     *
     * If no HashFilter is given, a new WinnowFilter is created with values geven
     * by the Options (or the default Options).
     *
     * After creation, first add files to the index which can then be queried.
     *
     * @param tokenizer A tokenizer for the correct programming language
     * @param options An object with the current options.
     * @param hashFilter An optional HashFilter to hashing the hashes returned by
     * the rolling hashing function.
     */
    constructor(tokenizer: Tokenizer, options?: Options, hashFilter?: HashFilter);
    /**
     * Compare a list of files with each other and the files already stored in the
     * index. The compared files are also added to the index.
     *
     * @param files: the file objects which need to be compared to the index
     * and each other. The file hashes will be added to the index.
     * @param hashFilter: an optional HashFilter. By default the HashFilter of the
     * Index object will be used.
     * @return an Report object, which is a list of Pairs
     * (containing all the pairedOccurrences between two files).
     */
    compareFiles(files: File[], hashFilter?: HashFilter): Promise<Report>;
    /**
       * Same as {@link Index#compareFiles} but files are already tokenized
       * Compare a list of files with each other and the files already stored in the
       * index. The compared files are also added to the index.
       *
       * @param tokenizedFiles: the tokenized file objects which need to be compared to the index
       * and each other. The file hashes will be added to the index.
       * @param hashFilter: an optional HashFilter. By default the HashFilter of the
       * Index object will be used.
       * @return an Report object, which is a list of Pairs
       * (containing all the pairedOccurrences between two files).
       */
    compareTokenizedFiles(tokenizedFiles: TokenizedFile[], hashFilter?: HashFilter): Promise<Report>;
    createMatches(tokenizedFiles: TokenizedFile[], hashFilter?: HashFilter): Promise<Map<Hash, Array<Occurrence>>>;
    /**
     * Compare a file to the index. A map will be returned containing the filename
     * of the matching file, along with a list of matching position between the
     * two files.
     *
     * @param file The file to query
     * @param hashFilter An optional HashFilter. By default the HashFilter of the
     * Index object will be used.
     * @return report with the results of the comparison
     * contains the common hashes (occurrences) between two files.
     */
    compareFile(file: File, hashFilter?: HashFilter): Promise<Report>;
}
export {};
//# sourceMappingURL=index.d.ts.map