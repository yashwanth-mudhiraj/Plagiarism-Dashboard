import { Fingerprint, HashFilter } from "./hashFilter";
export declare class WinnowFilter extends HashFilter {
    private readonly k;
    private readonly windowSize;
    /**
     * Generates a Winnow object with given window size and kgram size. The
     * winnowing algorithm will reduce the number of hashing values returned by the
     * hashing function. It will at least return 1 hashing for every window (i.e. for
     * every windowSize characters).
     *
     * @param k The kgram size of which hashes are calculated
     * @param windowSize The window size
     * @param kgramData Whether to output kgram content in fingerprints.
     */
    constructor(k: number, windowSize: number, kgramData?: boolean);
    /**
     * Returns an async iterator that yields fingerprints containing a hashing and its
     * corresponding kgram position. Can be called successively on multiple files.
     *
     * Code based on pseudocode from
     * http://theory.stanford.edu/~aiken/publications/papers/sigmod03.pdf
     *
     * @param tokens The list of tokens to process.
     */
    fingerprints(tokens: string[]): AsyncIterableIterator<Fingerprint>;
}
//# sourceMappingURL=winnowFilter.d.ts.map