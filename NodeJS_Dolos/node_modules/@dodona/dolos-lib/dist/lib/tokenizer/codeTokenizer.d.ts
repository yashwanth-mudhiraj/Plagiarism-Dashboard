import { Token, Tokenizer } from "./tokenizer";
export declare class CodeTokenizer extends Tokenizer {
    static supportedLanguages: string[];
    /**
     * Returns true if the grammar of the given language is supported.
     *
     * @param language The name of the language to check
     */
    static isSupportedLanguage(language: string): boolean;
    /**
     * Registers an additional language to Dolos. For this to work, the supporting
     * module of the name `tree-sitter-someLanguage` must first be installed
     * manually through yarn or npm.
     *
     * The function will throw an error when the supported module is not found.
     *
     * @param language The name of the language to register
     */
    static registerLanguage(language: string): void;
    readonly language: string;
    private readonly parser;
    /**
     * Creates a new tokenizer of the given language. Will throw an error when the
     * given language is not supported. See Tokenizer.supportedLanguages for a
     * list of all supported languages.
     *
     * @param language The language to use for this tokenizer.
     */
    constructor(language: string);
    /**
     * Runs the parser on a given string. Returns a stringified version of the
     * abstract syntax tree.
     *
     * @param text The text string to parse
     */
    tokenize(text: string): string;
    /**
     * Runs the parser on a given string. Returns an async iterator returning
     * tuples containing the stringified version of the token and the
     * corresponding position.
     *
     * @param text The text string to parse
     */
    generateTokens(text: string): IterableIterator<Token>;
    private tokenizeNode;
    private getChildrenRegions;
}
//# sourceMappingURL=codeTokenizer.d.ts.map