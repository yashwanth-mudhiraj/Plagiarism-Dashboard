"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dolos = void 0;
const analyze_1 = require("./lib/analyze");
const options_1 = require("./lib/util/options");
const file_1 = require("./lib/file/file");
const result_1 = require("./lib/util/result");
const d3_dsv_1 = require("d3-dsv");
const path = __importStar(require("path"));
const charTokenizer_1 = require("./lib/tokenizer/charTokenizer");
const fs_1 = __importDefault(require("fs"));
const fs = fs_1.default.promises;
function newTokenizer(language) {
    if (language == "chars") {
        return new charTokenizer_1.CharTokenizer();
    }
    else {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const CodeTokenizer = require("./lib/tokenizer/codeTokenizer").CodeTokenizer;
        return new CodeTokenizer(language);
    }
}
class Dolos {
    constructor(customOptions) {
        this.options = new options_1.Options(customOptions);
        this.tokenizer = newTokenizer(this.options.language);
        this.index = new analyze_1.Index(this.tokenizer, this.options);
    }
    async analyzePaths(paths) {
        let files = null;
        if (paths.length == 1) {
            const infoPath = paths[0];
            if (infoPath.toLowerCase().endsWith(".csv")) {
                const dirname = path.dirname(infoPath);
                try {
                    files = (0, d3_dsv_1.csvParse)((await fs.readFile(infoPath)).toString())
                        .map((row) => ({
                        filename: row.filename,
                        fullName: row.full_name,
                        id: row.id,
                        status: row.status,
                        submissionID: row.submission_id,
                        nameEN: row.name_en,
                        nameNL: row.name_nl,
                        exerciseID: row.exercise_id,
                        createdAt: new Date(row.created_at),
                        labels: row.labels
                    }))
                        .map((row) => file_1.File.fromPath(path.join(dirname, row.filename), row));
                }
                catch (e) {
                    throw new Error("The given '.csv'-file could not be opened");
                }
            }
            else {
                throw new Error("You only gave one file wich is not a '.csv.'-file. ");
            }
        }
        else {
            files = paths.map(location => file_1.File.fromPath(location));
        }
        return this.analyze((await result_1.Result.all(files)).ok());
    }
    async analyze(files) {
        if (files.length < 2) {
            throw new Error("You need to supply at least two files");
        }
        else if (files.length == 2 && this.options.maxFingerprintPercentage !== null) {
            throw new Error("You have given a maximum hash percentage but your are " +
                "comparing two files. Each matching hash will thus " +
                "be present in 100% of the files. This option does only" +
                "make sense when comparing more than two files.");
        }
        return this.index.compareFiles(files);
    }
}
exports.Dolos = Dolos;
//# sourceMappingURL=dolos.js.map